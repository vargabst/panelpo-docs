{"config":{"lang":["es"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Panel PO US","text":"<p>Funciones del Panel PO. </p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"archivo_core/","title":"Back End (Proceso interno)","text":""},{"location":"archivo_core/#paquetes","title":"Paquetes","text":"<ul> <li><code>pandas</code> - Procesamiento de datos estructurados.</li> <li><code>os</code> - Uso de funciones del sistema operativo.</li> <li><code>openpyxl</code> - Tratamiento de archivos Excel.</li> <li><code>tkinter</code> - Generaci\u00f3n de interfaces.</li> <li><code>numpy</code> - Realizaci\u00f3n de c\u00e1lculos complejos.</li> <li><code>datetime</code> - Uso de fechas y horas.</li> <li><code>pickle</code> - Encriptaci\u00f3n de archivos (memoria).</li> <li><code>re</code> - Uso de l\u00f3gicas de expresiones regulares.</li> <li><code>math</code> - Librer\u00eda nativa de Python para operaciones complejas.</li> <li><code>tempfile</code> - Uso de archivos temporales.</li> </ul>"},{"location":"archivo_core/#funciones-nativas-en-archivo-corepy","title":"Funciones nativas en Archivo 'core.py'","text":""},{"location":"archivo_core/#coreinstantessalidas","title":"core.InstantesSalidas","text":"<p>core.InstantesSalidas(inicio_periodo: datetime, intervalo: int, nSalidas: int)</p> <p>Esta funci\u00f3n retorna una lista con una cantidad definida de instantes de tiempo en el formato HH:MM:SS iniciando en inicio_periodo, espaciados de acuerdo al intervalo.</p> <p>Par\u00e1metros:</p> <ul> <li><code>inicio_periodo</code>: Instante en formato HH:MM:SS.</li> <li><code>intervalo</code>: Valor de espaciamiento entre instantes (en minutos).</li> <li><code>nSalidas</code>: Valor de cantidad de instantes a generar.</li> </ul>"},{"location":"archivo_core/#coreredondear_al_minuto","title":"core.redondear_al_minuto","text":"<p>core.redondear_al_minuto(td: timedelta, min_=1: int)</p> <p>Redondea un timedelta. Por defecto es al minuto. Se puede indicar como segundo argumento una cantidad decimal de minutos. (ej: 30s -&gt; 0.5)</p> <p>Par\u00e1metros:</p> <ul> <li><code>td</code>: Valor de tipo timedelta.</li> <li><code>min_</code>:  Valor de minutos en decimal.</li> </ul>"},{"location":"archivo_core/#coreint_codigo","title":"core.int_codigo","text":"<p>core.int_codigo(codigo: str)</p> <p>Convierte un c\u00f3digo desde string a int (si es posible).</p> <p>Par\u00e1metros:</p> <ul> <li><code>codigo</code>: Valor de tipo str.</li> </ul>"},{"location":"archivo_core/#corenew_durac_periodo","title":"core.new_durac_periodo","text":"<p>core.new_durac_periodo(d2: datetime, d1: datetime)</p> <p>Calcula la duraci\u00f3n de un periodo de tiempo entre d1 y d2.</p> <p>Par\u00e1metros:</p> <ul> <li><code>d2</code>: M\u00e1ximo valor del periodo.</li> <li><code>d1</code>: M\u00ednimo valor del periodo.</li> </ul>"},{"location":"archivo_core/#coreduracion_ok","title":"core.duracion_ok","text":"<p>core.duracion_ok(row: pandas.Series)</p> <p>Analiza una fila de un DataFrame con las columnas 'DURACION' y 'DURACION_MOD'. Si la columna 'DURACION_MOD' es nula o igual a cero, entonces retorna el valor de la columna 'DURACION'; si no, retorna el valor de la columna 'DURACION_MOD'</p> <p>Par\u00e1metros:</p> <ul> <li><code>row</code>: Fila del DataFrame a analizar.</li> </ul>"},{"location":"archivo_core/#coremelting_cons","title":"core.melting_cons","text":"<p>core.melting_cons(cons: pandas.DataFrame, version=1: int)</p> <p>Convierte los nombres de las columnas de un Consolidado de Salidas en una sola columna con valores. Si la versi\u00f3n es 1, entonces permite aplicar la funci\u00f3n en columnas con abreviaciones en unidad, servicio y sentido. Si la versi\u00f3n es distinta de 1, entonces permite aplicar la funci\u00f3n en columnas con los nombres originales.</p> <p>Par\u00e1metros:</p> <ul> <li><code>cons</code>: DataFrame del archivo Consolidado de Salidas.</li> <li><code>version</code>: Valor que define el tipo de <code>pandas.melt</code> a utilizar.</li> </ul>"},{"location":"archivo_core/#corereplace_char","title":"core.replace_char","text":"<p>core.replace_char(s: str, old_char: str, new_char: int)</p> <p>Reemplaza un car\u00e1cter por otro en un string.</p> <p>Par\u00e1metros:</p> <ul> <li><code>s</code>: String a alterar.</li> <li><code>old_char</code>: Valor del car\u00e1cter del string que se necesita reemplazar.</li> <li><code>new_char</code>: Valor del car\u00e1cter del string que se desea incorporar.</li> </ul>"},{"location":"archivo_core/#coredifference_between_dt_times","title":"core.difference_between_dt_times","text":"<p>core.difference_between_dt_times(a: timestamp, b: timestamp)</p> <p>Retorna la diferencia (en horas) entre los tiempos a y b.</p> <p>Par\u00e1metros:</p> <ul> <li><code>a</code>: Timestamp de inter\u00e9s.</li> <li><code>b</code>: Timestamp de inter\u00e9s.</li> </ul>"},{"location":"archivo_core/#corefilechoose","title":"core.fileChoose","text":"<p>core.fileChoose()</p> <p>Llama a la funci\u00f3n askopenfilename de la librer\u00eda filedialog. Esta abre una ventana de Windows para obtener el nombre de un archivo. Retorna el nombre del archivo seleccionado.</p>"},{"location":"archivo_core/#coreformulacheck","title":"core.formulaCheck","text":"<p>core.formulaCheck(filename: str)</p> <p>Verifica que el archivo Excel a cargar no tenga f\u00f3rmulas en alguna de sus celdas.</p> <p>Par\u00e1metros:</p> <ul> <li><code>filename</code>: Nombre del archivo Excel seleccionado.</li> </ul>"},{"location":"archivo_core/#corehiddensheetscheck","title":"core.hiddenSheetsCheck","text":"<p>core.hiddenSheetsCheck(filename: str)</p> <p>Verifica que el archivo Excel a cargar no tenga hojas ocultas.</p> <p>Par\u00e1metros:</p> <ul> <li><code>filename</code>: Nombre del archivo Excel seleccionado.</li> </ul>"},{"location":"archivo_core/#coreis_valid_time","title":"core.is_valid_time","text":"<p>core.is_valid_time(value: any)</p> <p>Verifica que el valor sea de tipo datetime.time.</p> <p>Par\u00e1metros:</p> <ul> <li><code>value</code>: Valor a analizar.</li> </ul>"},{"location":"archivo_core/#coretimeformatcheck","title":"core.timeFormatCheck","text":"<p>core.timeFormatCheck(filename: str)</p> <p>Verifica que las marcas horarias en el archivo Excel sean de tipo datetime.time.</p> <p>Par\u00e1metros:</p> <ul> <li><code>filename</code>: Nombre del archivo Excel seleccionado.</li> </ul>"},{"location":"archivo_core/#corechunker","title":"core.chunker","text":"<p>core.chunker(seq: list, size: int)</p> <p>Genera una estructura auxiliar de datos para recorrer una lista seleccionando size elementos.</p> <p>Par\u00e1metros:</p> <ul> <li><code>seq</code>: La lista de valores a intervenir.</li> <li><code>size</code>: Cantidad de elementos a agrupar de la lista.</li> </ul>"},{"location":"archivo_core/#corechunker_df","title":"core.chunker_df","text":"<p>core.chunker_df(seq: pandas.DataFrame, size: int)</p> <p>Genera una estructura auxiliar de datos para recorrer un dataframe seleccionando size filas.</p> <p>Par\u00e1metros:</p> <ul> <li><code>seq</code>: Dataframe a intervenir.</li> <li><code>size</code>: Cantidad de filas a agrupar del dataframe.</li> </ul>"},{"location":"archivo_core/#coreget_second_minimum","title":"core.get_second_minimum","text":"<p>core.get_second_minimum(x: list)</p> <p>Entrega el segundo valor m\u00ednimo (mayor que el m\u00ednimo global)</p> <p>Par\u00e1metros:</p> <ul> <li><code>x</code>: Lista con elementos ordenables.</li> </ul>"},{"location":"archivo_core/#coreconvertir_horario_dia_siguiente","title":"core.convertir_horario_dia_siguiente","text":"<p>core.convertir_horario_dia_siguiente(hi: timestamp, ht: timestamp)</p> <p>Retorna los horarios hi y ht (usualmente tomados desde las primera y \u00faltima marca horaria programada como salida) en formato \"DD/MM/YYYY HH:MM:SS\" para realizar operaciones de comparaci\u00f3n en programaci\u00f3n de operaciones. Esta funci\u00f3n permite convertir el mayor horario al d\u00eda siguiente para permitir operaciones de comparaci\u00f3n consistentes.</p> <p>Par\u00e1metros:</p> <ul> <li><code>hi</code>: Marca horaria menor.</li> <li><code>ht</code>: Marca horaria mayor.</li> </ul>"},{"location":"archivo_core/#corearreglar_horarios_inicio_fin","title":"core.arreglar_horarios_inicio_fin","text":"<p>core.arreglar_horarios_inicio_fin(first_exp_time: timestamp, second_exp_time: timestamp, last_exp_time: timestamp)</p> <p>Retorna los horarios de inicio (menor) y de fin (mayor) (usualmente tomados desde las primera y \u00faltima marca horaria programada como salida) en formato \"DD/MM/YYYY HH:MM:SS\" para realizar operaciones de comparaci\u00f3n en programaci\u00f3n de operaciones. Esta funci\u00f3n realiza una estrategia de comparaci\u00f3n en la diferencia entre la primera y la segunda marca horaria del d\u00eda, para estimar correctamente la posici\u00f3n (en d\u00edas) del horario mayor.</p> <p>Par\u00e1metros:</p> <ul> <li><code>first_exp_time</code>: Marca horaria menor.</li> <li><code>second_exp_time</code>: Marca horaria segunda menor.</li> <li><code>last_exp_time</code>: Marca horaria mayor.</li> </ul>"},{"location":"archivo_core/#coreget_first_and_last_exp","title":"core.get_first_and_last_exp","text":"<p>core.get_first_and_last_exp(sub_df: pandas.DataFrame)</p> <p>Esta funci\u00f3n recibe un subconjunto de filas de la tabla Anexo 4 cargada en el programa y entrega los tiempos de la primera (menor) y \u00faltima (mayor) salida programada.</p> <p>Par\u00e1metros:</p> <ul> <li><code>sub_df</code>: Subconjunto del DataFrame del Anexo 4 cargado.</li> </ul>"},{"location":"archivo_core/#coreget_limits_tramos","title":"core.get_limits_tramos","text":"<p>core.get_limits_tramos(sub_df: pandas.DataFrame)</p> <p>Esta funci\u00f3n recibe un subconjunto de filas de la tabla Anexo 4 cargada en el programa y retorna un dataframe con  los tiempos de la primera (menor) y \u00faltima (mayor) salida programada, por cada tramo horario definido en un tipo de d\u00eda. Esta funci\u00f3n se aplica en los casos en los que se sabe que el servicio-sentido-tipod\u00eda tiene dos tramos. </p> <p>Par\u00e1metros:</p> <ul> <li><code>sub_df</code>: Subconjunto del DataFrame del Anexo 4 cargado.</li> </ul>"},{"location":"archivo_core/#corefilter_max_values_dict","title":"core.filter_max_values_dict","text":"<p>core.filter_max_values_dict(dict_obj: dict)</p> <p>Esta funci\u00f3n recibe un diccionario, el cual tiene valores enteros; y retorna otro diccionario filtrado solo con valores mayores a 3. </p> <p>Par\u00e1metros:</p> <ul> <li><code>dict_obj</code>: Diccionario con valores enteros.</li> </ul>"},{"location":"archivo_core/#coredt_time_to_hours","title":"core.dt_time_to_hours","text":"<p>core.dt_time_to_hours(time: datetime.time)</p> <p>Esta funci\u00f3n recibe una marca horaria y retorna la cantidad de horas de la marca (con decimales)</p> <p>Par\u00e1metros:</p> <ul> <li><code>time</code>: Marca horaria</li> </ul>"},{"location":"archivo_core/#corecomp_durac_tolerance","title":"core.comp_durac_tolerance","text":"<p>core.comp_durac_tolerance(durac_a3: datetime.time, durac_a4: datetime.time)</p> <p>Esta funci\u00f3n aplica la regla de tolerancia en la duraci\u00f3n de las expediciones seg\u00fan el Anexo 4, dependiente de la duraci\u00f3n programada seg\u00fan el Anexo 3. Retorna un booleano y los l\u00edmites de tolerancia calculados.</p> <p>Par\u00e1metros:</p> <ul> <li><code>durac_a3</code>: Duraci\u00f3n en minutos de las expediciones programadas en el servicio-sentido-tipod\u00eda-mediahora.</li> <li><code>durac_a4</code>: Duraci\u00f3n en minutos de la expedici\u00f3n programada en el servicio-sentido-tipod\u00eda.</li> </ul>"},{"location":"archivo_core/#corecomp_iprog_tolerance","title":"core.comp_iprog_tolerance","text":"<p>core.comp_iprog_tolerance(iprog: int, imin: int, imax: int)</p> <p>Esta funci\u00f3n aplica la regla de tolerancia en los intervalos de salidas del Anexo 4, de acuerdo con la programaci\u00f3n calculada por salidas por media hora seg\u00fan el Anexo 3.</p> <p>Par\u00e1metros:</p> <ul> <li><code>iprog</code>: Intervalo promedio calculado desde Anexo 3 (tiempo/salidas)</li> <li><code>imin</code>: M\u00ednimo intervalo observado en la programaci\u00f3n de salidas seg\u00fan Anexo 4.</li> <li><code>imax</code>: M\u00e1ximo intervalo observado en la programaci\u00f3n de salidas seg\u00fan Anexo 4.</li> </ul>"},{"location":"archivo_core/#corehas_more_than_two_decimals","title":"core.has_more_than_two_decimals","text":"<p>core.has_more_than_two_decimals(value: float)</p> <p>Esta funci\u00f3n chequea si un valor tiene m\u00e1s de dos decimales. Retorna True si tiene m\u00e1s de dos decimales, False en caso contrario.</p> <p>Par\u00e1metros:</p> <ul> <li><code>value</code>: Valor a analizar.</li> </ul>"},{"location":"archivo_core/#corehas_seconds_greater_than_zero","title":"core.has_seconds_greater_than_zero","text":"<p>core.has_seconds_greater_than_zero(time_obj: datetime.time)</p> <p>Esta funci\u00f3n chequea si un horario tiene segundos.</p> <p>Par\u00e1metros:</p> <ul> <li><code>time_obj</code>: Marca horaria a analizar.</li> </ul>"},{"location":"archivo_core/#corecount_zeroes","title":"core.count_zeroes","text":"<p>core.count_zeroes(list_: list)</p> <p>Esta funci\u00f3n cuenta cu\u00e1ntos ceros hay al inicio y al final de una lista. Retorna las cantidades en una tupla.</p> <p>Par\u00e1metros:</p> <ul> <li><code>list_</code>: Lista con valores enteros.</li> </ul>"},{"location":"archivo_core/#coreasignacion","title":"core.asignacion","text":"<p>core.asignacion(salidas_periodo: int, duracion_periodo: int, grad: int, mhvaciasinicio=0: int, mhvaciastermino=0: int)</p> <p>Esta funci\u00f3n realiza la distribuci\u00f3n de salidas originalmente en un periodo, por cada media hora de operaci\u00f3n del servicio-sentido-tipod\u00eda.</p> <p>Par\u00e1metros:</p> <ul> <li><code>salidas_periodo</code>: Cantidad de salidas asociadas al servicio-sentido-periodo.</li> <li><code>duracion_periodo</code>: Duracion (en horas) del periodo.</li> <li><code>grad</code>: Valor que indica si el pr\u00f3ximo periodo aumenta o disminuye salidas.</li> <li><code>mhvaciasinicio</code>: Cantidad de medias horas sin salidas al inicio del periodo.</li> <li><code>mhvaciastermino</code>: Cantidad de medias horas sin salidas al final del periodo.</li> </ul>"},{"location":"archivo_core/#coredt_time_to_dt_dt","title":"core.dt_time_to_dt_dt","text":"<p>core.dt_time_to_dt_dt(time: any)</p> <p>Esta funci\u00f3n recibe una marca horaria y la convierte en objeto datetime.datetime.</p> <p>Par\u00e1metros:</p> <ul> <li><code>time</code>: Marca horaria.</li> </ul>"},{"location":"archivo_core/#coreall_to_dt_time","title":"core.all_to_dt_time","text":"<p>core.all_to_dt_time(dt_time: any)</p> <p>Esta funci\u00f3n recibe una marca horaria (en cualquier formato) y la convierte en objeto datetime.datetime.</p> <p>Par\u00e1metros:</p> <ul> <li><code>dt_time</code>: Marca horaria.</li> </ul>"},{"location":"archivo_core/#coredelete_files_in_folder","title":"core.delete_files_in_folder","text":"<p>core.delete_files_in_folder(folder_path: str)</p> <p>Esta funci\u00f3n recibe la direcci\u00f3n de una carpeta en el ordenador, y elimina todos los archivos en su interior.</p> <p>Par\u00e1metros:</p> <ul> <li><code>folder_path</code>: Direcci\u00f3n de una carpeta particular.</li> </ul>"},{"location":"archivo_core/#coreperiodo_inicio","title":"core.periodo_inicio","text":"<p>core.periodo_inicio(hora: int, minutos: int)</p> <p>Esta funci\u00f3n recibe un valor de horas y un valor de minutos, y retorna un objeto de tipo datetime.time aproximado a la media hora anterior de la marca horaria.</p> <p>Par\u00e1metros:</p> <ul> <li><code>hora</code>: Valor de horas.</li> <li><code>minutos</code>: Valor de minutos.</li> </ul>"},{"location":"archivo_core/#corenew_periodo_inicio","title":"core.new_periodo_inicio","text":"<p>core.new_periodo_inicio(hora: int)</p> <p>Esta funci\u00f3n recibe un valor de horas, y retorna un objeto de tipo datetime.time aproximado a la hora de la marca horaria.</p> <p>Par\u00e1metros:</p> <ul> <li><code>hora</code>: Valor de horas.</li> </ul>"},{"location":"archivo_core/#coreaux_salidas","title":"core.aux_salidas","text":"<p>core.aux_salidas(s_ant: int, s: int, s_sig: int)</p> <p>Esta funci\u00f3n recibe tres valores de salidas (para tres MH consecutivas) y retorna valores intermedios en funci\u00f3n de ellos.</p> <p>Par\u00e1metros:</p> <ul> <li><code>s_ant</code>: Cantidad de salidas de la MH anterior.</li> <li><code>s</code>: Cantidad de salidas de la MH actual.</li> <li><code>s_sig</code>: Cantidad de salidas de la MH siguiente.</li> </ul>"},{"location":"archivo_core/#coreclasif_an_frec","title":"core.clasif_an_frec","text":"<p>core.clasif_an_frec(frec: float)</p> <p>Esta funci\u00f3n recibe un valor de frecuencias y retorna una clasificaci\u00f3n para el an\u00e1lisis de frecuencias.</p> <p>Par\u00e1metros:</p> <ul> <li><code>frec</code>: Valor real asociado a buses por hora en un periodo.</li> </ul>"},{"location":"archivo_core/#clase-panelus","title":"Clase PanelUS","text":""},{"location":"archivo_core/#atributos-iniciales","title":"Atributos iniciales","text":"<ul> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.cons_un_chose_gate</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> <li><code>PanelUS.unidad</code></li> </ul>"},{"location":"archivo_panel_po_us/","title":"Front End (Interfaz)","text":""},{"location":"archivo_panel_po_us/#archivo-panel_po_uspy","title":"Archivo 'panel_po_us.py'","text":""},{"location":"clase_PanelUS/","title":"Clase PanelUS","text":""},{"location":"clase_PanelUS/#_1","title":"Clase PanelUS","text":""},{"location":"clase_PanelUS/#coreinstantessalidas","title":"core.InstantesSalidas","text":"<p>core.InstantesSalidas(inicio_periodo: datetime, intervalo: int, nSalidas: int)</p> <p>Esta funci\u00f3n retorna una lista con una cantidad definida de instantes de tiempo en el formato HH:MM:SS iniciando en inicio_periodo, espaciados de acuerdo al intervalo.</p>"},{"location":"clase_PanelUS/#parametros","title":"Par\u00e1metros:","text":"<ul> <li><code>inicio_periodo</code>: Instante en formato HH:MM:SS.</li> <li><code>intervalo</code>: Valor de espaciamiento entre instantes (en minutos).</li> <li><code>nSalidas</code>: Valor de cantidad de instantes a generar.</li> </ul>"}]}